% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/navbarLogoPage.R
\name{navbarLogoPage}
\alias{navbarLogoPage}
\title{Create a page with a top level navigation bar with logo and favicon.}
\usage{
navbarLogoPage(title, logo, ..., id = NULL, selected = NULL,
  favicon = NULL, shinyproxy = "auto",
  shinyproxy_admin_roles = character(0), logo_padding = c(4, 6),
  position = c("fixed-top", "static-top", "fixed-bottom"),
  header = NULL, footer = NULL, inverse = FALSE,
  collapsible = TRUE, fluid = TRUE, theme = NULL,
  windowTitle = title)
}
\arguments{
\item{title}{The title to display in the navbar}

\item{logo}{Path (or URL) to logo file}

\item{...}{\code{\link{tabPanel}} elements to include in the page. The
\code{navbarMenu} function also accepts strings, which will be used as menu
section headers. If the string is a set of dashes like \code{"----"} a
horizontal separator will be displayed in the menu.}

\item{id}{If provided, you can use \code{input$}\emph{\code{id}} in your
server logic to determine which of the current tabs is active. The value
will correspond to the \code{value} argument that is passed to
\code{\link{tabPanel}}.}

\item{selected}{The \code{value} (or, if none was supplied, the \code{title})
of the tab that should be selected by default. If \code{NULL}, the first
tab will be selected.}

\item{favicon}{Path (relative or absolute) to favicon file. URLs not supported.}

\item{shinyproxy}{Whether the app is running embedded in shinyproxy.
If TRUE, the logo acts as a link to the app list, a "sign out" button is
added to the top right with the user's email displayed next to it.
Defaults to "auto" which detects whether SHINYPROXY_USERNAME is set.}

\item{shinyproxy_admin_roles}{Character of user roles to be treated as admin. Not case sensitive. See details.}

\item{logo_padding}{Padding in pixel around the logo. A vector `c(vertical, horizontal)`. Useful to adjust the logo size.}

\item{position}{Determines whether the navbar should be displayed at the top
of the page with normal scrolling behavior (\code{"static-top"}), pinned at
the top (\code{"fixed-top"}), or pinned at the bottom
(\code{"fixed-bottom"}). Note that using \code{"fixed-top"} or
\code{"fixed-bottom"} will cause the navbar to overlay your body content,
unless you add padding, e.g.: \code{tags$style(type="text/css", "body
{padding-top: 70px;}")}}

\item{header}{Tag or list of tags to display as a common header above all
tabPanels.}

\item{footer}{Tag or list of tags to display as a common footer below all
tabPanels}

\item{inverse}{\code{TRUE} to use a dark background and light text for the
navigation bar}

\item{collapsible}{\code{TRUE} to automatically collapse the navigation
elements into a menu when the width of the browser is less than 940 pixels
(useful for viewing on smaller touchscreen device)}

\item{fluid}{\code{TRUE} to use a fluid layout. \code{FALSE} to use a fixed
layout.}

\item{theme}{Alternative Bootstrap stylesheet (normally a css file within the
www directory). For example, to use the theme located at
\code{www/bootstrap.css} you would use \code{theme = "bootstrap.css"}.}

\item{windowTitle}{The title that should be displayed by the browser window.
Useful if \code{title} is not a string.}
}
\value{
A UI defintion that can be passed to the \link{shinyUI} function.
}
\description{
Create a page *with a logo and favicon* that contains a top level navigation bar that can be used to
toggle a set of \code{\link{tabPanel}} elements. Optionally includes a dropdown with shinyproxy actions.
}
\details{
The key differences with a standard shiny::navbarPage are:

* Logo: mandatory image displayed next to the navbar title, path provided via the `logo` argument.
* Favicon: optional, path provided via the `favicon` argument.
* Shinyproxy dropdown: optional, displayed only if `shinyproxy` is `TRUE` (or `"auto"` and a shinyproxy environment is detected)
* `collapsible` is `TRUE` by default

The integration with shiny proxy works the following way:

The `shinyproxy` argument to navbarLogoPage can be set to `TRUE`, `FALSE` or `"auto"`.
If the latter, whether the app is running within shinyproxy is detected by checking the environment variables
for SHINYPROXY_USERNAME and SHINYPROXY_USERGROUPS, which are automatically set by shinyproxy when booting an app.

When using a navbarLogoPage with shinyproxy, the shinyproxy navbar is made redundant by the app navbar which provides all the relevant links.
You can use `hide-navbar: TRUE` in the shinyproxy `application.yml` to hide it.

The link to the admin panel will appear if:

- `shinyproxy` is TRUE or auto detected

- `shinyproxy_admin_roles` is passed to `navbarLogoPage`. It should match the `admin-groups` parameter in `application.yml`

 - the logged in user has one of the right roles (via the `SHINYPROXY_USERGROUPS` environment variable which is set by shinyproxy)
}
\examples{
library("shiny")
eye_logo <- paste0("https://thegraphicsfairy.com/",
  "wp-content/uploads/2013/10/Free-Public-Domain-Watching-Eye-Image-GraphicsFairy.jpg")
ui <- navbarLogoPage(
  title = "The all-seeing eye",
  logo = eye_logo,
  favicon = eye_logo,
  windowTitle = "Totally not a sect",
  tabPanel("What it sees", tags$h3("Everything.")),
  tabPanel("What it doesn't see", tags$h1("The all-seing eye sees ALL."))
)
\dontrun{
  shiny::runApp(shinyApp(ui = ui, server = function(...) {}))
}
}
\seealso{
\code{\link{navbarPage}}, \code{\link{tabPanel}}, \code{\link{tabsetPanel}},
  \code{\link{updateNavbarPage}}, \code{\link{insertTab}},
  \code{\link{showTab}}
}
